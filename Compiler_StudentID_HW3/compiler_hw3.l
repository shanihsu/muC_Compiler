/* Definition section */
%{
    #include "common.h"
    #include "y.tab.h"	/* header file generated by bison */
    extern YYSTYPE yylval;

    #define YY_NO_UNPUT
    #define YY_NO_INPUT
%}


/* Define regular expression label */
letter  [a-zA-Z_]
digit [0-9]
id {letter}+({letter}|{digit})*
inumber {digit}+
fnumber ({digit}*\.{digit}+)
newline		[\n]

%x CMT
%x STR
%option yylineno

/* Rules section */
%%

"/*"        { BEGIN(CMT); }
<CMT>"*/"   { BEGIN(INITIAL); }
<CMT>\n     {;}
<CMT>.      {;}
"//".*      {;}
"\""        { BEGIN(STR);
                return '"';
            }
<STR>"\""   { BEGIN(INITIAL);
                return '"';
            }
<STR>[^\"]* { yylval.s_val = strdup(yytext);
                return STRING_LIT;
            }

"+="        { yylval.type_val = "ADD_ASSIGN"; return ADD_ASSIGN; }
"-="        { yylval.type_val = "SUB_ASSIGN"; return SUB_ASSIGN; }
"*="        { yylval.type_val = "MUL_ASSIGN"; return MUL_ASSIGN; }
"/="        { yylval.type_val = "QUO_ASSIGN"; return QUO_ASSIGN; }
"%="        { yylval.type_val = "REM_ASSIGN"; return REM_ASSIGN; }
"++"        { yylval.type_val = "INC"; return INC; }
"--"        { yylval.type_val = "DEC"; return DEC; }
"||"        { yylval.type_val = "OR"; return OR; }
"&&"        { yylval.type_val = "AND"; return AND; }
"=="        { yylval.type_val = "EQL"; return EQL; }
"!="        { yylval.type_val = "NEQ"; return NEQ; }
"<="        { yylval.type_val = "LEQ"; return LEQ; }
">="        { yylval.type_val = "GEQ"; return GEQ; }
"<"         { yylval.type_val = "LSS"; return LSS; }
">"         { yylval.type_val = "GTR"; return GTR; }
"!"         { yylval.type_val = "NOT"; return NOT; }
"+"         { yylval.type_val = "ADD"; return ADD; }
"-"         { yylval.type_val = "SUB"; return SUB; }
"*"         { yylval.type_val = "MUL"; return MUL; }
"/"         { yylval.type_val = "QUO"; return QUO; }
"%"         { yylval.type_val = "REM"; return REM; }
"="         { yylval.type_val = "ASSIGN"; return ASSIGN; }

"int"       { yylval.type_val = "int"; return INT; }
"float"     { yylval.type_val = "float"; return FLOAT; }
"string"    { yylval.type_val = "string"; return STRING; }
"bool"      { yylval.type_val = "bool"; return BOOL; }
"if"        { return IF; }
"else"      { return ELSE; }
"for"       { return FOR; }
"while"     { return WHILE; }
"return"    { return RETURN; }
"true"      { yylval.s_val = "TRUE"; return BOOL_LIT; }
"false"     { yylval.s_val = "FALSE"; return BOOL_LIT; }
"print"     { yylval.s_val = "PRINT"; return PRINT; }

"("         { return LPAREN; }
")"         { return RPAREN; }
"["         { return LBRACK; }
"]"         { return RBRACK; }
"{"         { return LBRACE; }
"}"         { return RBRACE; }

{inumber}   { yylval.i_val = atoi(yytext);
                return INT_LIT;
            }

{fnumber}   { yylval.f_val = atof(yytext);
                return FLOAT_LIT;
            }

{id}        { yylval.ident_val = strdup(yytext);
                return IDENT;
            }
[;]         { return SEMICOLON; }
[\n]        {;}
<<EOF>>     { static int once = 0;
                if (once++) {
                    yyterminate(); 
                }
            }
[ \t]+      {;}
.           {;}
%%
/*  C Code section */
int yywrap(void)
{
    return 1;
}